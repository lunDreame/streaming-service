{"version":3,"file":"static/js/998.305884e1.chunk.js","mappings":"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","sources":["components/VideoPlayer.js","pages/VideoPlayerPage.js"],"sourcesContent":["import React, { useEffect, useRef, memo, useState } from 'react';\nimport Hls from 'hls.js';\n\nconst VideoPlayer = memo(({ streamUrl }) => {\n    const videoRef = useRef(null);\n    const hlsRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const video = videoRef.current;\n\n        if (!video || !streamUrl) return;\n\n        const initHls = () => {\n            if (hlsRef.current) {\n                hlsRef.current.destroy();\n            }\n\n            if (Hls.isSupported()) {\n                const hls = new Hls({\n                    debug: false,\n                    enableWorker: true,\n                    backBufferLength: 30,\n                    maxBufferSize: 0,\n                    maxBufferLength: 30,\n                    liveSyncDurationCount: 3,\n                    manifestLoadingTimeOut: 20000,\n                    manifestLoadingMaxRetry: 6,\n                    levelLoadingTimeOut: 20000,\n                    fragLoadingTimeOut: 20000,\n                    fragLoadingMaxRetry: 6,\n                    xhrSetup: function (xhr, url) {\n                        xhr.withCredentials = false;\n                    }\n                });\n\n                hls.loadSource(streamUrl);\n                hls.attachMedia(video);\n\n                hls.on(Hls.Events.MANIFEST_PARSED, () => {\n                    setIsLoading(false);\n                    video.play().catch(error => {\n                        console.warn('Autoplay failed:', error);\n                    });\n                });\n\n                hls.on(Hls.Events.ERROR, (event, data) => {\n                    if (data.fatal) {\n                        switch (data.type) {\n                            case Hls.ErrorTypes.NETWORK_ERROR:\n                                console.log('Network error, attempting recovery...');\n                                hls.startLoad();\n                                break;\n                            case Hls.ErrorTypes.MEDIA_ERROR:\n                                console.log('Media error, attempting recovery...');\n                                hls.recoverMediaError();\n                                break;\n                            default:\n                                console.error('Fatal error:', data);\n                                setIsLoading(false);\n                                break;\n                        }\n                    }\n                });\n\n                hlsRef.current = hls;\n            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n                video.src = streamUrl;\n                video.addEventListener('loadedmetadata', () => {\n                    setIsLoading(false);\n                    video.play().catch(error => {\n                        console.warn('Autoplay failed:', error);\n                    });\n                });\n            }\n        };\n\n        initHls();\n\n        return () => {\n            const currentVideo = video;\n            const currentHls = hlsRef.current;\n\n            if (currentHls) {\n                currentHls.stopLoad();\n                currentHls.detachMedia();\n                currentHls.destroy();\n                hlsRef.current = null;\n            }\n\n            if (currentVideo) {\n                currentVideo.removeAttribute('src');\n                currentVideo.load();\n            }\n        };\n    }, [streamUrl]);\n\n    return (\n        <div className=\"video-player-container\">\n            {isLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-spinner\" />\n                </div>\n            )}\n            <video\n                ref={videoRef}\n                controls\n                className={`video-player ${isLoading ? 'loading' : ''}`}\n                playsInline\n                autoPlay\n            />\n        </div>\n    );\n});\n\nVideoPlayer.displayName = 'VideoPlayer';\n\nexport default VideoPlayer;","import React, { useMemo } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useApp } from '../contexts/AppContext';\nimport VideoPlayer from '../components/VideoPlayer';\n\nconst VideoPlayerPage = () => {\n    const { subChannel } = useParams();\n    const navigate = useNavigate();\n    const { streams, channels, subChannels } = useApp();\n\n    const channelDisplayName = useMemo(() => {\n        for (const broadcaster of channels) {\n            const channelData = subChannels[broadcaster];\n            if (!channelData) continue;\n\n            for (const type of ['TV', 'Radio']) {\n                const typeChannels = channelData[type];\n                if (!typeChannels) continue;\n\n                const channel = typeChannels.find(ch => ch.id === subChannel);\n                if (channel) {\n                    return channel.name;\n                }\n            }\n        }\n        return subChannel;\n    }, [channels, subChannels, subChannel]);\n\n    const streamUrl = useMemo(() => streams[subChannel], [streams, subChannel]);\n\n    if (!streamUrl) {\n        return (\n            <div className=\"error-message\">\n                <h2>스트림을 찾을 수 없습니다</h2>\n                <button\n                    onClick={() => navigate('/')}\n                    className=\"channel-button\"\n                >\n                    홈으로 돌아가기\n                </button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"video-container\">\n            <h2>{channelDisplayName} 방송 보기</h2>\n            <VideoPlayer streamUrl={streamUrl} />\n            <button\n                onClick={() => navigate('/')}\n                className=\"channel-button\"\n                style={{ marginTop: '1rem' }}\n            >\n                다른 채널 보기\n            </button>\n        </div>\n    );\n};\n\nexport default VideoPlayerPage;"],"names":["VideoPlayer","memo","_ref","streamUrl","videoRef","useRef","hlsRef","isLoading","setIsLoading","useState","useEffect","video","current","initHls","destroy","Hls","hls","debug","enableWorker","backBufferLength","maxBufferSize","maxBufferLength","liveSyncDurationCount","manifestLoadingTimeOut","manifestLoadingMaxRetry","levelLoadingTimeOut","fragLoadingTimeOut","fragLoadingMaxRetry","xhrSetup","xhr","url","withCredentials","loadSource","attachMedia","on","MANIFEST_PARSED","play","catch","error","console","warn","ERROR","event","data","fatal","type","NETWORK_ERROR","log","startLoad","MEDIA_ERROR","recoverMediaError","canPlayType","src","addEventListener","currentVideo","currentHls","stopLoad","detachMedia","removeAttribute","load","_jsxs","className","children","_jsx","ref","controls","playsInline","autoPlay","displayName","VideoPlayerPage","subChannel","useParams","navigate","useNavigate","streams","channels","subChannels","useApp","channelDisplayName","useMemo","broadcaster","channelData","typeChannels","channel","find","ch","id","name","onClick","style","marginTop"],"sourceRoot":""}